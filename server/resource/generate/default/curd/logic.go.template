package @{.varName | ToLower}

import (
	"context"
	"github.com/gogf/gf/v2/errors/gerror"
	"github.com/gogf/gf/v2/frame/g"
	"zhongfang/internal/dao"
	"zhongfang/internal/model"
	"zhongfang/internal/model/entity"
	"zhongfang/internal/service"
)

type s@{.varName} struct{}

func init() {
	service.Register@{.varName}(New())
}

func New() *s@{.varName} {
	return &s@{.varName}{}
}

// 获取@{.tableComment}列表
func (s *s@{.varName}) @{.varName}List(ctx context.Context, in model.@{.varName}ListInput) (out *model.@{.varName}ListOutput, err error) {
	//1.获得*gdb.Model对象，方便后续调用
	m := dao.T@{.varName}.Ctx(ctx).Where("is_active", 1)
	cols := dao.T@{.varName}.Columns()

	//2. 实例化响应结构体
	out = &model.@{.varName}ListOutput{
		CommonPaginationRes: model.CommonPaginationRes{
			Page: in.Page,
			Size: in.Size,
		},
	}

    @{.listWhere}

	//3. 分页查询
	listModel := m.Page(in.Page, in.Size)
	//4. 再查询count，判断有无数据
	out.Total, err = m.Count()
	if err != nil || out.Total == 0 {
		//解决空数据返回[] 而不是返回nil null的问题
		out.List = make([]*model.@{.varName}Base, 0)
		return out, err
	}
	//5. 延迟初始化list切片 确定有数据，再按期望大小初始化切片容量
	out.List = make([]*model.@{.varName}Base, 0, out.Total)
	//6. 把查询到的结果赋值到响应结构体中
	if err := listModel.Scan(&out.List); err != nil {
		return out, err
	}

	return out, err
}

@{ if or (eq .options.Step.HasView true) (eq .options.Step.HasEdit true) }
// 获取@{.tableComment}详情
func (s *s@{.varName}) @{.varName}Detail(ctx context.Context, in model.@{.varName}DetailInput) (out *model.@{.varName}DetailOutput, err error) {

	// 初始化输出结构体
	out = &model.@{.varName}DetailOutput{}
	// 主馆信息
	m := dao.T@{.varName}.Ctx(ctx).Where(dao.T@{.varName}.Columns().Id, in.@{.varName}Id)
	err = m.Scan(new(model.@{.varName}DetailView))
	if err != nil {
		return nil, err
	}

	return out, nil
}
@{end}

@{ if eq .options.Step.HasEdit true }
// 编辑/新增@{.tableComment}
func (s *s@{.varName}) @{.varName}Edit(ctx context.Context, in model.@{.varName}EditInput) (out *model.@{.varName}EditOutput, err error) {
	if in.@{.varName}Id > 0 { // 修改
		if _, err = dao.T@{.varName}.Ctx(ctx).Data(in).OmitEmpty().WherePri(in.@{.varName}Id).Update(); err != nil {
			err = gerror.Wrap(err, "修改失败，请稍后重试！")
		}

		return &model.@{.varName}EditOutput{@{.varName}Id: in.@{.varName}Id}, nil
	}
	// 插入主博物馆数据并获取ID
	lastInsertID, err := dao.T@{.varName}.Ctx(ctx).Data(in).InsertAndGetId()
	if err != nil {
		return out, err
	}

	return &model.@{.varName}EditOutput{@{.varName}Id: int(lastInsertID)}, nil
}
@{end}

// 获取@{.tableComment}状态
func (s *s@{.varName}) @{.varName}Status(ctx context.Context, in model.@{.varName}StatusInput) (err error) {
	var @{.varName | ToLower} *entity.T@{.varName}
	err = dao.T@{.varName}.Ctx(ctx).WherePri(in.@{.varName}Id).Scan(&@{.varName | ToLower})

	if err != nil {
		return err
	}

	var val int

	switch in.Field {
	case "open":
		val = muse.IsOpen
	}

	_, err = dao.T@{.varName}.Ctx(ctx).Data(g.Map{
		"is_" + in.Field: val ^ 1,
	}).Where(dao.T@{.varName}.Columns().Id, in.@{.varName}Id).Update()

	return err
}


@{ if eq .options.Step.HasDel true }
// 获取@{.tableComment}删除
func (s *s@{.varName}) @{.varName}Delete(ctx context.Context, in model.@{.varName}DeleteInput) (err error) {

	_, err = dao.T@{.varName}.Ctx(ctx).Data(g.Map{
		"is_active": 0,
	}).Where(dao.T@{.varName}.Columns().Id, in.@{.varName}Id).Update()

	return err
}
@{end}